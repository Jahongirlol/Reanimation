HumanDied = false
CountSCIFIMOVIELOL = 1
function SCIFIMOVIELOL(Part0,Part1,Position,Angle)
	local AlignPos = Instance.new('AlignPosition', Part1); AlignPos.Name = "AliP_"..CountSCIFIMOVIELOL
	AlignPos.ApplyAtCenterOfMass = true;
	AlignPos.MaxForce = 67752;
	AlignPos.MaxVelocity = math.huge/9e110;
	AlignPos.ReactionForceEnabled = false;
	AlignPos.Responsiveness = 200;
	AlignPos.RigidityEnabled = false;
	local AlignOri = Instance.new('AlignOrientation', Part1); AlignOri.Name = "AliO_"..CountSCIFIMOVIELOL
	AlignOri.MaxAngularVelocity = math.huge/9e110;
	AlignOri.MaxTorque = 67752;
	AlignOri.PrimaryAxisOnly = false;
	AlignOri.ReactionTorqueEnabled = false;
	AlignOri.Responsiveness = 200;
	AlignOri.RigidityEnabled = false;
	local AttachmentA=Instance.new('Attachment',Part1); AttachmentA.Name = "AthP_"..CountSCIFIMOVIELOL
	local AttachmentB=Instance.new('Attachment',Part0); AttachmentB.Name = "AthP_"..CountSCIFIMOVIELOL
	local AttachmentC=Instance.new('Attachment',Part1); AttachmentC.Name = "AthO_"..CountSCIFIMOVIELOL
	local AttachmentD=Instance.new('Attachment',Part0); AttachmentD.Name = "AthO_"..CountSCIFIMOVIELOL
	AttachmentC.Orientation = Angle
	AttachmentA.Position = Position
	AlignPos.Attachment1 = AttachmentA;
	AlignPos.Attachment0 = AttachmentB;
	AlignOri.Attachment1 = AttachmentC;
	AlignOri.Attachment0 = AttachmentD;
	CountSCIFIMOVIELOL = CountSCIFIMOVIELOL + 1
end

if game:GetService("Players").LocalPlayer.Character.Humanoid.RigType == Enum.HumanoidRigType.R6 then		game:GetService("Players").LocalPlayer["Character"].Archivable = true 
	game:GetService("Players").LocalPlayer["Character"].Archivable = true 
	local CloneChar = game:GetService("Players").LocalPlayer["Character"]:Clone()
	game:GetService("Players").LocalPlayer["Character"].Humanoid.WalkSpeed = 0 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.JumpPower = 0 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.AutoRotate = false
	local FalseChar = Instance.new("Model", workspace); FalseChar.Name = ""
	Instance.new("Part",FalseChar).Name = "Head" 
	Instance.new("Part",FalseChar).Name = "Torso" 
	Instance.new("Humanoid",FalseChar).Name = "Humanoid"
	game:GetService("Players").LocalPlayer["Character"] = FalseChar
	game:GetService("Players").LocalPlayer["Character"].Humanoid.Name = "FalseHumanoid"
	local Clone = game:GetService("Players").LocalPlayer["Character"]:FindFirstChild("FalseHumanoid"):Clone()
	Clone.Parent = game:GetService("Players").LocalPlayer["Character"]
	Clone.Name = "Humanoid"
	game:GetService("Players").LocalPlayer["Character"]:FindFirstChild("FalseHumanoid"):Destroy() 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.Health = 0 
	game:GetService("Players").LocalPlayer["Character"] = workspace[game:GetService("Players").LocalPlayer.Name] 
	wait(5.65) 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.Health = 0
	CloneChar.Parent = workspace 
	CloneChar.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer["Character"].HumanoidRootPart.CFrame * CFrame.new(0,2,0)
	wait() 
	CloneChar.Humanoid.BreakJointsOnDeath = false
	workspace.Camera.CameraSubject = CloneChar.Humanoid 
	CloneChar.Name = "non" 
	CloneChar.Humanoid.DisplayDistanceType = "None"
	if CloneChar.Head:FindFirstChild("face") then CloneChar.Head:FindFirstChild("face"):Destroy() end
	if workspace[game:GetService("Players").LocalPlayer.Name].Head:FindFirstChild("face") then workspace[game:GetService("Players").LocalPlayer.Name].Head:FindFirstChild("face").Parent = CloneChar.Head end

	FalseChar:Destroy()

	local DeadChar = workspace[game:GetService("Players").LocalPlayer.Name]

	local LVecPart = Instance.new("Part", workspace) LVecPart.CanCollide = false LVecPart.Transparency = 1
	local CONVEC
	local function VECTORUNIT()
		if HumanDied then CONVEC:Disconnect(); return end
		local lookVec = workspace.Camera.CFrame.lookVector
		local Root = CloneChar["HumanoidRootPart"]
		LVecPart.Position = Root.Position
		LVecPart.CFrame = CFrame.new(LVecPart.Position, Vector3.new(lookVec.X * 9999, lookVec.Y, lookVec.Z * 9999))
	end
	CONVEC = game:GetService("RunService").Heartbeat:Connect(VECTORUNIT)

	local CONDOWN
	local WDown, ADown, SDown, DDown, SpaceDown = false, false, false, false, false
	local function KEYDOWN(_,Processed) 
		if HumanDied then CONDOWN:Disconnect(); return end
		if Processed ~= true then
			local Key = _.KeyCode
			if Key == Enum.KeyCode.W then
				WDown = true end
			if Key == Enum.KeyCode.A then
				ADown = true end
			if Key == Enum.KeyCode.S then
				SDown = true end
			if Key == Enum.KeyCode.D then
				DDown = true end
			if Key == Enum.KeyCode.Space then
				SpaceDown = true end end end
	CONDOWN = game:GetService("UserInputService").InputBegan:Connect(KEYDOWN)

	local CONUP
	local function KEYUP(_)
		if HumanDied then CONUP:Disconnect(); return end
		local Key = _.KeyCode
		if Key == Enum.KeyCode.W then
			WDown = false end
		if Key == Enum.KeyCode.A then
			ADown = false end
		if Key == Enum.KeyCode.S then
			SDown = false end
		if Key == Enum.KeyCode.D then
			DDown = false end
		if Key == Enum.KeyCode.Space then
			SpaceDown = false end end
	CONUP = game:GetService("UserInputService").InputEnded:Connect(KEYUP)

	local function MoveClone(X,Y,Z)
		LVecPart.CFrame = LVecPart.CFrame * CFrame.new(-X,Y,-Z)
		workspace["non"].Humanoid.WalkToPoint = LVecPart.Position
	end

	coroutine.wrap(function() 
		while true do game:GetService("RunService").RenderStepped:Wait()
			if HumanDied then break end
			if WDown then MoveClone(0,0,1e4) end
			if ADown then MoveClone(1e4,0,0) end
			if SDown then MoveClone(0,0,-1e4) end
			if DDown then MoveClone(-1e4,0,0) end
			if SpaceDown then CloneChar["Humanoid"].Jump = true end
			if WDown ~= true and ADown ~= true and SDown ~= true and DDown ~= true then
				workspace["non"].Humanoid.WalkToPoint = workspace["non"].HumanoidRootPart.Position end
		end 
	end)()

	local con
	function UnCollide()
		if HumanDied then con:Disconnect(); return end
		for _,Parts in next, CloneChar:GetDescendants() do
			if Parts:IsA("BasePart") then
				Parts.CanCollide = false 
			end 
		end
		for _,Parts in next, DeadChar:GetDescendants() do
			if Parts:IsA("BasePart") then
				Parts.CanCollide = false
			end 
		end 
	end
	con = game:GetService("RunService").Stepped:Connect(UnCollide)

	local resetBindable = Instance.new("BindableEvent")
	resetBindable.Event:connect(function()
		game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
		resetBindable:Destroy()
		CloneChar.Humanoid.Health = 0
	end)
	game:GetService("StarterGui"):SetCore("ResetButtonCallback", resetBindable)

	coroutine.wrap(function()
		while true do
			game:GetService("RunService").RenderStepped:wait()
			if not CloneChar or not CloneChar:FindFirstChild("Head") or not CloneChar:FindFirstChild("Humanoid") or CloneChar:FindFirstChild("Humanoid").Health <= 0 then 
				HumanDied = true
				pcall(function()
					game.Players.LocalPlayer.Character = CloneChar
					CloneChar:Destroy()
					game.Players.LocalPlayer.Character = DeadChar
					if resetBindable then
						game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
						resetBindable:Destroy()
					end
					DeadChar.Humanoid.Health = 0
				end)
				break
			end		
		end
	end)()

	SCIFIMOVIELOL(DeadChar["Head"],CloneChar["Head"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["Torso"],CloneChar["Torso"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["Left Arm"],CloneChar["Left Arm"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["Right Arm"],CloneChar["Right Arm"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["Left Leg"],CloneChar["Left Leg"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["Right Leg"],CloneChar["Right Leg"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["HumanoidRootPart"],CloneChar["HumanoidRootPart"],Vector3.new(0,0,0),Vector3.new(0,0,0))

	local hatnameclone = {}
	for _,v in next, game:FindFirstChildOfClass("Players").LocalPlayer["Character"]:GetChildren() do
		if v:IsA("Accessory") then
			if hatnameclone[v.Name] then
				if hatnameclone[v.Name] == "s" then
					hatnameclone[v.Name] = {}
				end
				table.insert(hatnameclone[v.Name],v)
			else
				hatnameclone[v.Name] = "s"
			end
		end
	end
	for _,v in pairs(hatnameclone) do
		if type(v) == "table" then
			local num = 1
			for _,w in pairs(v) do
				w.Name = w.Name..num
				num = num + 1
			end
		end
	end
	hatnameclone = nil
	for _,v in next, DeadChar:GetChildren() do
		if v:IsA("Accessory") then
			local topacc = false
			if v.Handle:FindFirstChildOfClass("Weld") then v.Handle:FindFirstChildOfClass("Weld"):Destroy() end
			local clonnedhat = v:Clone()
			clonnedhat.Parent = CloneChar
			local hatath = clonnedhat.Handle:FindFirstChildOfClass("Attachment")
			local partath
			for _,v in pairs(CloneChar:GetChildren()) do
				if v:IsA("BasePart") then
					for _,w in pairs(v:GetChildren()) do
						if w.Name == hatath.Name then
							partath = w
							break
						end
					end
					if partath then break end
				end
			end
			local accweld = Instance.new("Weld",clonnedhat.Handle)
			accweld.Name = "AccessoryWeld"
			accweld.Part0 = clonnedhat.Handle
			accweld.Part1 = partath.Parent
			accweld.C0 = hatath.CFrame
			accweld.C1 = partath.CFrame
			if v.Handle:FindFirstChildOfClass("Attachment") then
				local ath__ = v.Handle:FindFirstChildOfClass("Attachment")
				if ath__.Name == "HatAttachment" or ath__.Name == "HairAttachment" or ath__.Name == "FaceFrontAttachment" or ath__.Name == "FaceCenterAttachment" then
					topacc = ath__.Name
				end
			end
			local bv = Instance.new("BodyVelocity",v.Handle)
			bv.Velocity = Vector3.new(0,0,0)
			coroutine.wrap(function()
				if topacc then
					local allthings = SCIFIMOVIELOL(v.Handle,DeadChar.UpperTorso,Vector3.new(0,1.35,0)+ (DeadChar.Head[topacc].Position + (v.Handle[topacc].Position*-1)),Vector3.new(0,0,0))
					local normaltop = allthings[1].Attachment1
					local alipos = allthings[1]
					local alirot = allthings[4]
					local p0 = v.Handle
					local p1 = DeadChar.Head
					while true do
						game:GetService("RunService").RenderStepped:wait()
						if HumanDied then break end
						coroutine.wrap(function()
							if alipos.Attachment1 == normaltop then
								p0.CFrame = (((DeadChar.UpperTorso.CFrame * CFrame.new(0,1.35,0)) * p1[topacc].CFrame) * p0[topacc].CFrame:inverse())
							else
								v.Handle.CFrame = alipos.Attachment1.Parent.CFrame * CFrame.new(alipos.Attachment1.Position) * CFrame.Angles(math.rad(alirot.Attachment1.Rotation.X),math.rad(alirot.Attachment1.Rotation.Y),math.rad(alirot.Attachment1.Rotation.Z))
							end
						end)()
					end
				else
					SCIFIMOVIELOL(v.Handle,CloneChar[v.Name].Handle,Vector3.new(0,0,0),Vector3.new(0,0,0))
				end
			end)
		end
	end

	for _,BodyParts in next, CloneChar:GetDescendants() do
		if BodyParts:IsA("BasePart") or BodyParts:IsA("Part") then
			BodyParts.Transparency = 1 
		end 
	end	

	coroutine.wrap(function() 
		if HumanDied ~= true then 
			local holdup; 
			local function lolhold()
				local Tor = CloneChar:FindFirstChild("Torso")
				local ra = CloneChar:FindFirstChild("Right Arm")
				local la = CloneChar:FindFirstChild("Left Arm")
				local ll = CloneChar:FindFirstChild("Left Leg")
				local rl = CloneChar:FindFirstChild("Right Leg")
				local h = CloneChar:FindFirstChild("Head")
				local roo = CloneChar:FindFirstChild("HumanoidRootPart")
				if Tor and CloneChar then
					DeadChar.Torso.CFrame = Tor.CFrame;
					DeadChar["Right Arm"].CFrame = ra.CFrame
					DeadChar["Left Arm"].CFrame = la.CFrame
					DeadChar["Head"].CFrame = h.CFrame
					DeadChar["Left Leg"].CFrame = ll.CFrame
					DeadChar["Right Leg"].CFrame = rl.CFrame
					for _,v in pairs(DeadChar:GetChildren())do
						if v:IsA("Part") or v:IsA("MeshPart") then
							v.Velocity = Vector3.new(0,40,0)
						elseif v:IsA("Accessory") then
							v.Handle.CFrame = CloneChar[v.Name].Handle.CFrame
						end
					end
				end;
			end; 
			if HumanDied then 
				holdup:Disconnect()
			else 
				holdup = game:GetService("RunService").Heartbeat:Connect(lolhold); 
			end;
		end; 
	end)();
	workspace.FallenPartsDestroyHeight = 0 / 0;
elseif game:GetService("Players").LocalPlayer.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then		game:GetService("Players").LocalPlayer["Character"].Archivable = true 
	game:GetService("Players").LocalPlayer["Character"].Archivable = true 
	local CloneChar = game:GetObjects("rbxassetid://5227463276")[1]
	game:GetService("Players").LocalPlayer["Character"].Humanoid.WalkSpeed = 0 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.JumpPower = 0 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.AutoRotate = false
	local FalseChar = Instance.new("Model", workspace); FalseChar.Name = ""
	Instance.new("Part",FalseChar).Name = "Head" 
	Instance.new("Part",FalseChar).Name = "Torso" 
	Instance.new("Humanoid",FalseChar).Name = "Humanoid"
	game:GetService("Players").LocalPlayer["Character"] = FalseChar
	game:GetService("Players").LocalPlayer["Character"].Humanoid.Name = "FalseHumanoid"
	local Clone = game:GetService("Players").LocalPlayer["Character"]:FindFirstChild("FalseHumanoid"):Clone()
	Clone.Parent = game:GetService("Players").LocalPlayer["Character"]
	Clone.Name = "Humanoid"
	game:GetService("Players").LocalPlayer["Character"]:FindFirstChild("FalseHumanoid"):Destroy() 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.Health = 0 
	game:GetService("Players").LocalPlayer["Character"] = workspace[game:GetService("Players").LocalPlayer.Name] 
	wait(5.65) 
	game:GetService("Players").LocalPlayer["Character"].Humanoid.Health = 0
	CloneChar.Parent = workspace 
	CloneChar.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer["Character"].HumanoidRootPart.CFrame * CFrame.new(0,2,0)
	wait() 
	CloneChar.Humanoid.BreakJointsOnDeath = false
	workspace.Camera.CameraSubject = CloneChar.Humanoid 
	CloneChar.Name = "non" 
	CloneChar.Humanoid.DisplayDistanceType = "None"
	if CloneChar.Head:FindFirstChild("face") then CloneChar.Head:FindFirstChild("face"):Destroy() end
	if workspace[game:GetService("Players").LocalPlayer.Name].Head:FindFirstChild("face") then workspace[game:GetService("Players").LocalPlayer.Name].Head:FindFirstChild("face").Parent = CloneChar.Head end

	FalseChar:Destroy()

	local DeadChar = workspace[game:GetService("Players").LocalPlayer.Name]

	local LVecPart = Instance.new("Part", workspace) LVecPart.CanCollide = false LVecPart.Transparency = 1
	local CONVEC
	local function VECTORUNIT()
		if HumanDied then CONVEC:Disconnect(); return end
		local lookVec = workspace.Camera.CFrame.lookVector
		local Root = CloneChar["HumanoidRootPart"]
		LVecPart.Position = Root.Position
		LVecPart.CFrame = CFrame.new(LVecPart.Position, Vector3.new(lookVec.X * 9999, lookVec.Y, lookVec.Z * 9999))
	end
	CONVEC = game:GetService("RunService").Heartbeat:Connect(VECTORUNIT)

	local CONDOWN
	local WDown, ADown, SDown, DDown, SpaceDown = false, false, false, false, false
	local function KEYDOWN(_,Processed) 
		if HumanDied then CONDOWN:Disconnect(); return end
		if Processed ~= true then
			local Key = _.KeyCode
			if Key == Enum.KeyCode.W then
				WDown = true end
			if Key == Enum.KeyCode.A then
				ADown = true end
			if Key == Enum.KeyCode.S then
				SDown = true end
			if Key == Enum.KeyCode.D then
				DDown = true end
			if Key == Enum.KeyCode.Space then
				SpaceDown = true end end end
	CONDOWN = game:GetService("UserInputService").InputBegan:Connect(KEYDOWN)

	local CONUP
	local function KEYUP(_)
		if HumanDied then CONUP:Disconnect(); return end
		local Key = _.KeyCode
		if Key == Enum.KeyCode.W then
			WDown = false end
		if Key == Enum.KeyCode.A then
			ADown = false end
		if Key == Enum.KeyCode.S then
			SDown = false end
		if Key == Enum.KeyCode.D then
			DDown = false end
		if Key == Enum.KeyCode.Space then
			SpaceDown = false end end
	CONUP = game:GetService("UserInputService").InputEnded:Connect(KEYUP)

	local function MoveClone(X,Y,Z)
		LVecPart.CFrame = LVecPart.CFrame * CFrame.new(-X,Y,-Z)
		workspace["non"].Humanoid.WalkToPoint = LVecPart.Position
	end

	coroutine.wrap(function() 
		while true do game:GetService("RunService").RenderStepped:Wait()
			if HumanDied then break end
			if WDown then MoveClone(0,0,1e4) end
			if ADown then MoveClone(1e4,0,0) end
			if SDown then MoveClone(0,0,-1e4) end
			if DDown then MoveClone(-1e4,0,0) end
			if SpaceDown then CloneChar["Humanoid"].Jump = true end
			if WDown ~= true and ADown ~= true and SDown ~= true and DDown ~= true then
				workspace["non"].Humanoid.WalkToPoint = workspace["non"].HumanoidRootPart.Position end
		end 
	end)()

	local con
	function UnCollide()
		if HumanDied then con:Disconnect(); return end
		for _,Parts in next, CloneChar:GetDescendants() do
			if Parts:IsA("BasePart") then
				Parts.CanCollide = false 
			end 
		end
		for _,Parts in next, DeadChar:GetDescendants() do
			if Parts:IsA("BasePart") then
				Parts.CanCollide = false
			end 
		end 
	end
	con = game:GetService("RunService").Stepped:Connect(UnCollide)

	local resetBindable = Instance.new("BindableEvent")
	resetBindable.Event:connect(function()
		game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
		resetBindable:Destroy()
		CloneChar.Humanoid.Health = 0
	end)
	game:GetService("StarterGui"):SetCore("ResetButtonCallback", resetBindable)

	coroutine.wrap(function()
		while true do
			game:GetService("RunService").RenderStepped:wait()
			if not CloneChar or not CloneChar:FindFirstChild("Head") or not CloneChar:FindFirstChild("Humanoid") or CloneChar:FindFirstChild("Humanoid").Health <= 0 then 
				HumanDied = true
				pcall(function()
					game.Players.LocalPlayer.Character = CloneChar
					CloneChar:Destroy()
					game.Players.LocalPlayer.Character = DeadChar
					if resetBindable then
						game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
						resetBindable:Destroy()
					end
					DeadChar.Humanoid.Health = 0
				end)
				break
			end		
		end
	end)()

	SCIFIMOVIELOL(DeadChar["Head"],CloneChar["Head"],Vector3.new(0,0,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["UpperTorso"],CloneChar["Torso"],Vector3.new(0,0.15,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["LowerTorso"],CloneChar["Torso"],Vector3.new(0,-0.78,0),Vector3.new(0,0,0))

	SCIFIMOVIELOL(DeadChar["LeftUpperArm"],CloneChar["Left Arm"],Vector3.new(0,0.375,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["LeftLowerArm"],CloneChar["Left Arm"],Vector3.new(0,-0.215,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["LeftHand"],CloneChar["Left Arm"],Vector3.new(0,-0.825,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["RightUpperArm"],CloneChar["Right Arm"],Vector3.new(0,0.375,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["RightLowerArm"],CloneChar["Right Arm"],Vector3.new(0,-0.215,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["RightHand"],CloneChar["Right Arm"],Vector3.new(0,-0.825,0),Vector3.new(0,0,0))

	SCIFIMOVIELOL(DeadChar["LeftUpperLeg"],CloneChar["Left Leg"],Vector3.new(0,0.575,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["LeftLowerLeg"],CloneChar["Left Leg"],Vector3.new(0,-0.2,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["LeftFoot"],CloneChar["Left Leg"],Vector3.new(0,-0.85,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["RightUpperLeg"],CloneChar["Right Leg"],Vector3.new(0,0.575,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["RightLowerLeg"],CloneChar["Right Leg"],Vector3.new(0,-0.2,0),Vector3.new(0,0,0))
	SCIFIMOVIELOL(DeadChar["RightFoot"],CloneChar["Right Leg"],Vector3.new(0,-0.85,0),Vector3.new(0,0,0))

	for _,BodyParts in next, CloneChar:GetDescendants() do
		if BodyParts:IsA("BasePart") or BodyParts:IsA("Part") then
			BodyParts.Transparency = 1 
		end 
	end	

	local hatnameclone = {}
	for _,v in next, game:FindFirstChildOfClass("Players").LocalPlayer["Character"]:GetChildren() do
		if v:IsA("Accessory") then
			if hatnameclone[v.Name] then
				if hatnameclone[v.Name] == "s" then
					hatnameclone[v.Name] = {}
				end
				table.insert(hatnameclone[v.Name],v)
			else
				hatnameclone[v.Name] = "s"
			end
		end
	end
	for _,v in pairs(hatnameclone) do
		if type(v) == "table" then
			local num = 1
			for _,w in pairs(v) do
				w.Name = w.Name..num
				num = num + 1
			end
		end
	end
	hatnameclone = nil
	for _,v in next, DeadChar:GetChildren() do
		if v:IsA("Accessory") then
			local topacc = false
			if v.Handle:FindFirstChildOfClass("Weld") then v.Handle:FindFirstChildOfClass("Weld"):Destroy() end
			local clonnedhat = v:Clone()
			clonnedhat.Parent = CloneChar
			local hatath = clonnedhat.Handle:FindFirstChildOfClass("Attachment")
			local partath
			for _,v in pairs(CloneChar:GetChildren()) do
				if v:IsA("BasePart") then
					for _,w in pairs(v:GetChildren()) do
						if w.Name == hatath.Name then
							partath = w
							break
						end
					end
					if partath then break end
				end
			end
			local accweld = Instance.new("Weld",clonnedhat.Handle)
			accweld.Name = "AccessoryWeld"
			accweld.Part0 = clonnedhat.Handle
			accweld.Part1 = partath.Parent
			accweld.C0 = hatath.CFrame
			accweld.C1 = partath.CFrame
			if v.Handle:FindFirstChildOfClass("Attachment") then
				local ath__ = v.Handle:FindFirstChildOfClass("Attachment")
				if ath__.Name == "HatAttachment" or ath__.Name == "HairAttachment" or ath__.Name == "FaceFrontAttachment" or ath__.Name == "FaceCenterAttachment" then
					topacc = ath__.Name
				end
			end
			local bv = Instance.new("BodyVelocity",v.Handle)
			bv.Velocity = Vector3.new(0,0,0)
			coroutine.wrap(function()
				if topacc then
					local allthings = SCIFIMOVIELOL(v.Handle,DeadChar.UpperTorso,Vector3.new(0,1.35,0)+ (DeadChar.Head[topacc].Position + (v.Handle[topacc].Position*-1)),Vector3.new(0,0,0))
					local normaltop = allthings[1].Attachment1
					local alipos = allthings[1]
					local alirot = allthings[4]
					local p0 = v.Handle
					local p1 = DeadChar.Head
					while true do
						game:GetService("RunService").RenderStepped:wait()
						if HumanDied then break end
						coroutine.wrap(function()
							if alipos.Attachment1 == normaltop then
								p0.CFrame = (((DeadChar.UpperTorso.CFrame * CFrame.new(0,1.35,0)) * p1[topacc].CFrame) * p0[topacc].CFrame:inverse())
							else
								v.Handle.CFrame = alipos.Attachment1.Parent.CFrame * CFrame.new(alipos.Attachment1.Position) * CFrame.Angles(math.rad(alirot.Attachment1.Rotation.X),math.rad(alirot.Attachment1.Rotation.Y),math.rad(alirot.Attachment1.Rotation.Z))
							end
						end)()
					end
				else
					SCIFIMOVIELOL(v.Handle,CloneChar[v.Name].Handle,Vector3.new(0,0,0),Vector3.new(0,0,0))
				end
			end)
		end
	end
	coroutine.wrap(function() 
		if HumanDied ~= true then 
			local holdup; 
			local function lolhold()
				if HumanDied then
					return
				end
				local h = DeadChar:FindFirstChild("Head")
				local upt = DeadChar:FindFirstChild("UpperTorso")
				local lt = DeadChar:FindFirstChild("LowerTorso")
				local lua = DeadChar:FindFirstChild("LeftUpperArm")
				local lla = DeadChar:FindFirstChild("LeftLowerArm")
				local lh = DeadChar:FindFirstChild("LeftHand")
				local rua = DeadChar:FindFirstChild("RightUpperArm")
				local rla = DeadChar:FindFirstChild("RightLowerArm")
				local rh = DeadChar:FindFirstChild("RightHand")
				local lul = DeadChar:FindFirstChild("LeftUpperLeg")
				local lll = DeadChar:FindFirstChild("LeftLowerLeg")
				local lf = DeadChar:FindFirstChild("LeftFoot")
				local rul = DeadChar:FindFirstChild("RightUpperLeg")
				local rll = DeadChar:FindFirstChild("RightLowerLeg")
				local rf = DeadChar:FindFirstChild("RightFoot")
				if upt and CloneChar then
					if HumanDied == true then
						return
					end
					h.CFrame = CloneChar.Head.CFrame;
					upt.CFrame = CloneChar.Torso.CFrame*CFrame.new(0,0.15,0)
					lt.CFrame = CloneChar.Torso.CFrame*CFrame.new(0,-0.78,0)
					lua.CFrame = CloneChar["Left Arm"].CFrame*CFrame.new(0,0.375,0)
					lla.CFrame = CloneChar["Left Arm"].CFrame*CFrame.new(0,-0.215,0)
					lh.CFrame = CloneChar["Left Arm"].CFrame*CFrame.new(0,-0.825,0)
					rua.CFrame = CloneChar["Right Arm"].CFrame*CFrame.new(0,0.375,0)
					rla.CFrame = CloneChar["Right Arm"].CFrame*CFrame.new(0,-0.215,0)
					rh.CFrame = CloneChar["Right Arm"].CFrame*CFrame.new(0,-0.825,0)
					lul.CFrame = CloneChar["Left Leg"].CFrame*CFrame.new(0,0.575,0)
					lll.CFrame = CloneChar["Left Leg"].CFrame*CFrame.new(0,-0.2,0)
					lf.CFrame = CloneChar["Left Leg"].CFrame*CFrame.new(0,-0.85,0)
					rul.CFrame = CloneChar["Right Leg"].CFrame*CFrame.new(0,0.575,0)
					rll.CFrame = CloneChar["Right Leg"].CFrame*CFrame.new(0,-0.2,0)
					rf.CFrame = CloneChar["Right Leg"].CFrame*CFrame.new(0,-0.85,0)
					for _,v in pairs(DeadChar:GetChildren())do
						if v:IsA("Accessory") then
							v.Handle.CFrame = CloneChar[v.Name].Handle.CFrame
						end
					end
				end;
			end; 
			if HumanDied == true then 
				holdup:Disconnect()
			else 
				holdup = game:GetService("RunService").Heartbeat:Connect(lolhold); 
			end;
		end; 
	end)();
	workspace.FallenPartsDestroyHeight = 0 / 0;
end
